1:"$Sreact.fragment"
2:I[9304,["758","static/chunks/758-3bcd6ff5a5923bb7.js","408","static/chunks/408-66a5df6a6d14ce44.js","278","static/chunks/278-d31066b752c7d284.js","177","static/chunks/app/layout-fbcf3b1566eedd93.js"],"ThemeProvider"]
3:I[7555,[],""]
4:I[1295,[],""]
5:I[4999,["758","static/chunks/758-3bcd6ff5a5923bb7.js","408","static/chunks/408-66a5df6a6d14ce44.js","278","static/chunks/278-d31066b752c7d284.js","177","static/chunks/app/layout-fbcf3b1566eedd93.js"],"default"]
6:I[6985,["758","static/chunks/758-3bcd6ff5a5923bb7.js","408","static/chunks/408-66a5df6a6d14ce44.js","411","static/chunks/411-7991859ddd7a6620.js","278","static/chunks/278-d31066b752c7d284.js","53","static/chunks/53-9934314193d96501.js","171","static/chunks/171-acc09b53c59aa7f6.js","584","static/chunks/app/blog/layout-01ee848eb08dbc98.js"],"default"]
7:I[3336,["758","static/chunks/758-3bcd6ff5a5923bb7.js","408","static/chunks/408-66a5df6a6d14ce44.js","411","static/chunks/411-7991859ddd7a6620.js","278","static/chunks/278-d31066b752c7d284.js","53","static/chunks/53-9934314193d96501.js","171","static/chunks/171-acc09b53c59aa7f6.js","584","static/chunks/app/blog/layout-01ee848eb08dbc98.js"],"default"]
8:I[9010,["758","static/chunks/758-3bcd6ff5a5923bb7.js","408","static/chunks/408-66a5df6a6d14ce44.js","411","static/chunks/411-7991859ddd7a6620.js","278","static/chunks/278-d31066b752c7d284.js","53","static/chunks/53-9934314193d96501.js","171","static/chunks/171-acc09b53c59aa7f6.js","584","static/chunks/app/blog/layout-01ee848eb08dbc98.js"],"default"]
9:I[9332,["758","static/chunks/758-3bcd6ff5a5923bb7.js","411","static/chunks/411-7991859ddd7a6620.js","866","static/chunks/866-25cce1e60117ff8d.js","567","static/chunks/app/blog/%5Bid%5D/page-8831c654aa77ec0f.js"],"default"]
c:I[9665,[],"OutletBoundary"]
f:I[9665,[],"ViewportBoundary"]
11:I[9665,[],"MetadataBoundary"]
13:I[6614,[],""]
:HL["/jenson-portfolio/_next/static/media/a34f9d1faa5f3315-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/jenson-portfolio/_next/static/css/cfe42278c063ec95.css","style"]
a:T93a,
# React 與 TypeScript 最佳實踐指南

在現代前端開發中，TypeScript 已經成為提高代碼質量和開發效率的重要工具。本文將分享在 React 項目中使用 TypeScript 的一些最佳實踐。

## 1. 組件 Props 類型定義

為組件定義明確的 Props 類型是使用 TypeScript 的基礎：

```tsx
// 不推薦
const Button = (props) => {
  // ...
};

// 推薦
interface ButtonProps {
  text: string;
  onClick: () => void;
  variant?: 'primary' | 'secondary';
  disabled?: boolean;
}

const Button = ({ text, onClick, variant = 'primary', disabled = false }: ButtonProps) => {
  // ...
};
```

## 2. 使用函數組件和 React.FC

雖然 `React.FC` 提供了隱式的 children 類型，但現在更推薦直接使用函數組件並明確定義 props 類型：

```tsx
// 不推薦
const Header: React.FC<HeaderProps> = (props) => {
  // ...
};

// 推薦
const Header = ({ title, subtitle }: HeaderProps) => {
  // ...
};
```

## 3. 狀態管理中的類型安全

在使用 useState 和 useReducer 時，明確定義狀態類型：

```tsx
// useState 示例
const [user, setUser] = useState<User | null>(null);

// useReducer 示例
type Action = 
  | { type: 'INCREMENT'; payload: number }
  | { type: 'DECREMENT'; payload: number };

const [state, dispatch] = useReducer<Reducer<State, Action>>(reducer, initialState);
```

## 4. 事件處理函數類型

為事件處理函數提供正確的類型：

```tsx
// 不推薦
const handleChange = (e) => {
  // ...
};

// 推薦
const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  // ...
};

const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
  e.preventDefault();
  // ...
};
```

## 5. 使用泛型組件

創建可復用的泛型組件：

```tsx
interface ListProps<T> {
  items: T[];
  renderItem: (item: T) => React.ReactNode;
}

function List<T>({ items, renderItem }: ListProps<T>) {
  return (
    <ul>
      {items.map((item, index) => (
        <li key={index}>{renderItem(item)}</li>
      ))}
    </ul>
  );
}

// 使用
<List
  items={users}
  renderItem={(user) => <UserCard user={user} />}
/>
```

## 結論

TypeScript 與 React 的結合可以顯著提高代碼質量和開發體驗。通過遵循這些最佳實踐，您可以充分利用 TypeScript 的類型系統，創建更加健壯和可維護的 React 應用。
    b:Tc40,
# 深入理解 Next.js 的服務器組件

Next.js 13 引入的服務器組件（Server Components）是 React 生態系統中的一個重大進步。本文將深入探討服務器組件的工作原理、優勢以及實際應用場景。

## 服務器組件是什麼？

服務器組件是在服務器上渲染的 React 組件，它們允許開發者在服務器上執行某些操作，如數據獲取、訪問後端資源等，而無需將這些邏輯和相關依賴發送到客戶端。

## 服務器組件與客戶端組件的區別

服務器組件：
- 在服務器上渲染
- 可以訪問後端資源（數據庫、文件系統等）
- 不包含交互邏輯
- 減少客戶端 JavaScript 包大小

客戶端組件：
- 在瀏覽器中渲染
- 可以使用狀態、效果和瀏覽器 API
- 支持事件處理和用戶交互
- 需要發送到客戶端執行

## 在 Next.js 中使用服務器組件

在 Next.js 13+ 的 App Router 中，所有組件默認都是服務器組件。要明確指定一個組件為客戶端組件，需要在文件頂部添加 'use client' 指令：

```tsx
// 這是一個服務器組件
async function ServerComponent() {
  const data = await fetchData(); // 直接在服務器上獲取數據
  return <div>{data.map(item => <p>{item.name}</p>)}</div>;
}

// 這是一個客戶端組件
'use client'
import { useState } from 'react';

function ClientComponent() {
  const [count, setCount] = useState(0);
  return (
    <button onClick={() => setCount(count + 1)}>
      Count: {count}
    </button>
  );
}
```

## 服務器組件的優勢

1. **更好的性能**：減少發送到客戶端的 JavaScript 數量
2. **直接訪問後端資源**：無需 API 層即可訪問數據庫
3. **改進的初始加載體驗**：更快的首次內容繪製
4. **自動代碼拆分**：更細粒度的代碼分割

## 實際應用場景

### 數據獲取

```tsx
// app/users/page.tsx
async function UsersPage() {
  // 直接從數據庫獲取數據，無需 API 路由
  const users = await db.user.findMany();
  
  return (
    <div>
      <h1>Users</h1>
      <ul>
        {users.map(user => (
          <li key={user.id}>{user.name}</li>
        ))}
      </ul>
    </div>
  );
}
```

### 混合使用服務器和客戶端組件

```tsx
// ServerComponent.tsx
async function ServerComponent() {
  const data = await fetchExpensiveData();
  
  return (
    <div>
      <h1>Server Rendered Data</h1>
      <pre>{JSON.stringify(data, null, 2)}</pre>
      <ClientComponent initialCount={data.count} />
    </div>
  );
}

// ClientComponent.tsx
'use client'
import { useState } from 'react';

function ClientComponent({ initialCount }) {
  const [count, setCount] = useState(initialCount);
  
  return (
    <button onClick={() => setCount(count + 1)}>
      Count: {count}
    </button>
  );
}
```

## 結論

Next.js 的服務器組件代表了 React 應用架構的一個重要進步，它允許開發者結合服務器渲染和客戶端交互的優勢，創建更高效、更可擴展的 Web 應用。通過理解和正確使用服務器組件，開發者可以顯著提升應用性能和用戶體驗。
    0:{"P":null,"b":"5gZJtCaB-ZrEK7JenoNC6","p":"/jenson-portfolio","c":["","blog","react-typescript-best-practices",""],"i":false,"f":[[["",{"children":["blog",{"children":[["id","react-typescript-best-practices","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/jenson-portfolio/_next/static/css/cfe42278c063ec95.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"zh-TW","suppressHydrationWarning":true,"children":["$","body",null,{"className":"__className_14da81","children":["$","$L2",null,{"attribute":"class","defaultTheme":"system","enableSystem":true,"children":[["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}],["$","$L5",null,{}]]}]}]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","div",null,{"className":"relative min-h-screen overflow-hidden bg-background","children":[["$","$L6",null,{}],["$","$L7",null,{}],["$","main",null,{"className":"relative z-10 min-h-screen pt-16","children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","$L8",null,{}]]}]]}],{"children":[["id","react-typescript-best-practices","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[["$","$L9",null,{"post":{"id":"react-typescript-best-practices","title":"React 與 TypeScript 最佳實踐指南","excerpt":"探討在 React 項目中使用 TypeScript 的最佳實踐，包括類型定義、組件設計和狀態管理。","content":"$a","date":"2023-08-15","author":{"name":"Jenson Chen","avatar":"/avatar.png"},"tags":["React","TypeScript","前端開發"],"readTime":8},"relatedPosts":[{"id":"nextjs-server-components","title":"深入理解 Next.js 的服務器組件","excerpt":"探討 Next.js 服務器組件的工作原理、優勢以及實際應用場景。","content":"$b","date":"2023-09-22","author":{"name":"Jenson Chen","avatar":"/avatar.png"},"tags":["Next.js","React","服務器組件"],"readTime":10}]}],"$undefined",null,["$","$Lc",null,{"children":["$Ld","$Le",null]}]]}],{},null,false]},null,false]},null,false]},[null,[],[]],false],["$","$1","h",{"children":[null,["$","$1","mnZqz9LwI7esYRWKDEdn8",{"children":[["$","$Lf",null,{"children":"$L10"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],["$","$L11",null,{"children":"$L12"}]]}],false]],"m":"$undefined","G":["$13","$undefined"],"s":false,"S":true}
10:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
d:null
e:null
12:[["$","title","0",{"children":"Jenson Loh - 懂技術的產品經理"}],["$","meta","1",{"name":"description","content":"Jenson Loh 的個人網站，展示產品管理能力、技術理解和專業經驗。"}],["$","meta","2",{"name":"generator","content":"v0.dev"}]]
