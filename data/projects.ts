export interface Project {
  id: string
  title: string
  shortDescription: string
  fullDescription: string
  productPerspective: string
  technicalPerspective: string
  technologies: string[]
  challenges: string[]
  outcomes: string[]
  date: string
  imageUrl?: string
  demoUrl?: string
  githubUrl?: string
}

export const projectsData: Project[] = [
  {
    id: "enterprise-erp-system",
    title: "智能零售ERP與決策支持系統",
    shortDescription: "整合銷售追蹤、商機管理、智能排班與庫存預測的全方位零售管理平台",
    fullDescription:
      "設計並開發了一套面向零售企業的智能ERP系統，實現了對門店銷售、元購銷售的全面追蹤，以及對線索、商機的全生命週期管理。系統採用現代化UI/UX設計，大幅提升了用戶友好性，成功替代了傳統的Excel記錄方式。特別針對門市銷售員工排班這一NP難問題，開發了智能排班算法，平衡了員工偏好、銷售高峰期與人力成本。同時，系統整合了基於機器學習的庫存預測模型，通過自動化數據採集與多維度分析，為補貨決策提供精準的數據支持，顯著提升了庫存周轉率與銷售效率。",
    productPerspective:
      "從產品角度看，該系統解決了零售企業在數字化轉型過程中面臨的多個關鍵痛點。首先，通過直觀的銷售儀表板，管理層可以實時掌握各門店、各渠道的銷售情況，快速識別業績波動與趨勢。其次，CRM模塊實現了線索獲取、商機轉化、客戶維護的全流程管理，提高了銷售轉化率。在用戶體驗方面，我們進行了大量的用戶研究與交互設計優化，將複雜的業務流程轉化為簡潔明了的操作界面，使得即使是非技術背景的門店員工也能快速上手。智能排班功能考慮了員工技能、偏好、法定工時等多種約束條件，在確保服務質量的同時優化人力資源配置。庫存管理模塊則通過數據驅動的方式，幫助企業降低庫存成本，減少斷貨與積壓的風險。",
    technicalPerspective:
      "從技術角度看，系統採用了前後端分離的微服務架構。前端使用React與TypeScript開發，結合Ant Design Pro構建企業級UI組件，並使用ECharts實現複雜的數據可視化。後端基於Spring Cloud微服務框架，使用Spring Boot開發各個業務模塊，通過Spring Cloud Gateway實現API網關，Nacos處理服務發現與配置管理。數據存儲層使用MySQL與MongoDB的組合，並通過Redis實現緩存與分布式鎖。在技術難點方面，員工智能排班算法採用了遺傳算法與模擬退火相結合的方式，有效解決了這一NP難問題；庫存預測模塊使用Python開發，結合LSTM與XGBoost模型，考慮了季節性、促銷活動、市場趨勢等多種因素，預測準確率達到業界領先水平；自動化數據採集使用Selenium與Puppeteer實現，通過分布式爬蟲架構，高效穩定地從多個渠道獲取市場數據。系統還實現了完善的權限管理、審計日誌、數據加密等企業級安全特性。",
    technologies: [
      "React",
      "TypeScript",
      "Ant Design Pro",
      "ECharts",
      "Spring Cloud",
      "Spring Boot",
      "MySQL",
      "MongoDB",
      "Redis",
      "Python",
      "TensorFlow",
      "Selenium",
      "Docker",
      "Kubernetes",
    ],
    challenges: [
      "解決員工排班NP難問題，平衡多種約束條件與優化目標",
      "構建準確的庫存預測模型，應對複雜多變的零售市場環境",
      "設計高效的數據採集與處理管道，確保數據時效性與準確性",
      "優化系統性能，支持大規模門店網絡的並發操作",
      "設計直觀的用戶界面，降低門店員工的使用門檻",
    ],
    outcomes: [
      "系統部署後，企業運營效率提升40%，人力成本降低25%",
      "庫存周轉率提高35%，庫存積壓減少50%，斷貨率降低60%",
      "銷售線索轉化率提升30%，客戶滿意度提高25%",
      "員工排班滿意度提升45%，排班時間從平均每週8小時減少至30分鐘",
      "系統成功替代Excel等傳統工具，實現企業數據資產的統一管理與價值挖掘",
    ],
    date: "2024",
  },
  {
    id: "tender-crawler-system",
    title: "標案智能爬蟲與資源分配系統",
    shortDescription: "多門店標案自動分配與追蹤系統，結合數據分析與機器學習實現智能化資源調度",
    fullDescription:
      "開發了一套完整的標案智能爬蟲與資源分配系統，實現對政府採購網、各大招標平台的自動化數據採集、分析與多門店資源智能分配。系統採用分布式架構，結合機器學習算法對標案進行分類與評分，並根據各門店的專業領域、地理位置和資源情況進行最優分配。同時實現了標案全生命週期的追蹤管理，為業務決策提供數據支持。",
    productPerspective:
      "從產品角度看，該系統解決了多門店企業在標案獲取與分配過程中的效率與準確性問題。通過自動化爬蟲替代了人工搜索與篩選，將標案獲取時間從平均每天4小時縮減至幾分鐘。智能分配算法考慮了門店專業領域匹配度、地理位置、當前資源負載等多維因素，提高了標案分配的合理性。系統還提供了直觀的數據儀表板，展示各類標案分布、中標率、項目進度等關鍵指標，幫助管理層進行資源規劃和業務決策。",
    technicalPerspective:
      "從技術角度看，系統採用了微服務架構，使用Docker和Kubernetes實現容器化部署與管理。爬蟲模塊基於Selenium和Playwright，實現了多策略的反反爬機制，包括IP代理池輪換、請求頻率動態調整、User-Agent隨機化、無頭瀏覽器指紋偽裝等技術，大幅提高了爬蟲穩定性。數據處理管道使用Apache Airflow編排，結合Spark進行大規模數據處理。分配算法融合了協同過濾和強化學習模型，通過歷史投標數據不斷優化分配策略。系統後端採用FastAPI構建RESTful API，前端使用React和TypeScript開發，數據存儲層使用PostgreSQL和MongoDB的組合方案。",
    technologies: [
      "Python",
      "Selenium",
      "Playwright",
      "FastAPI",
      "React",
      "TypeScript",
      "Docker",
      "Kubernetes",
      "Apache Airflow",
      "Spark",
      "PostgreSQL",
      "MongoDB",
      "機器學習",
      "強化學習",
    ],
    challenges: [
      "應對複雜多變的反爬蟲機制，確保數據採集的穩定性和完整性",
      "處理非結構化標案文本，提取關鍵信息並進行標準化",
      "設計公平高效的標案分配算法，平衡專業匹配度和資源利用率",
      "構建可擴展的分布式系統架構，支持大規模標案數據的處理和分析",
      "實現標案全生命週期的自動化追蹤和預警機制",
    ],
    outcomes: [
      "爬蟲穩定性從原有的65%提升至99.5%，日均採集標案數量從200增至1500+",
      "標案分配準確率達到92%，減少了80%的人工干預需求",
      "系統部署後，企業整體中標率提升35%，業務效率提高60%",
      "通過數據分析和預測模型，幫助企業提前識別高價值標案，戰略性調配資源",
      "建立了包含超過10萬條標案數據的知識庫，為後續業務拓展提供數據支持",
    ],
    date: "2025",
  },
  {
    id: "integrated-ecommerce-platform",
    title: "全渠道電商與企業數字化平台",
    shortDescription: "整合ToC與ToB業務的全渠道電商平台，實現用戶全生命週期管理與數據驅動決策",
    fullDescription:
      "設計並開發了一套完整的全渠道電商與企業數字化平台，包含面向消費者的形象官網、電商系統以及面向企業的管理後台。該平台採用前後端分離架構，實現了用戶全生命週期的精準跟蹤與分析，並通過數據可視化為企業提供決策支持。系統支持多渠道銷售、庫存統一管理、訂單全流程追蹤，並提供豐富的數據分析功能，幫助企業深入了解用戶行為、優化營銷策略、提升運營效率。",
    productPerspective:
      "從產品角度看，該平台解決了企業在數字化轉型過程中面臨的多渠道整合與數據孤島問題。通過統一的用戶身份系統，實現了用戶在不同渠道間的無縫體驗與數據打通。平台提供了個性化推薦引擎，基於用戶行為數據和購買歷史，精準推送符合用戶偏好的商品，提升了轉化率。後台管理系統設計了直觀的數據儀表板，展示銷售趨勢、用戶分布、商品表現等關鍵指標，並支持多維度數據下鑽，幫助管理層快速識別業務機會與風險。此外，平台還整合了會員管理、營銷活動、客戶服務等模塊，實現了營銷全流程的閉環管理。",
    technicalPerspective:
      "從技術角度看，系統採用了嚴格的前後端分離架構。前端基於Vue.js框架，結合Tailwind CSS實現響應式設計，並使用GSAP實現流暢的動畫效果與交互體驗。後端採用Spring Boot微服務架構，使用MyBatis-Plus簡化數據訪問層開發，通過Sa-Token實現統一的認證授權。系統在技術實現上有諸多亮點：採用雪花算法生成分布式ID，確保高併發環境下的唯一性；通過樂觀鎖機制防止商品超賣；設計了靈活的SKU架構支持複雜商品規格組合；實現了全面的XSS攻擊防禦；使用Redisson實現分布式鎖保證數據一致性；構建了統一的異常處理機制、系統日誌框架和參數驗證體系，大幅提升了系統的穩定性與可維護性。數據層面，系統使用MySQL存儲結構化數據，Redis實現緩存與分布式會話，並通過ELK Stack實現日誌集中管理與分析。",
    technologies: [
      "Vue.js",
      "Tailwind CSS",
      "GSAP",
      "Spring Boot",
      "MyBatis-Plus",
      "Redis",
      "Sa-Token",
      "MySQL",
      "Redisson",
      "ELK Stack",
      "Docker",
      "Jenkins",
    ],
    challenges: [
      "構建高性能、高可用的分布式電商系統架構，支持業務快速擴展",
      "設計靈活的商品SKU體系，滿足複雜多變的商品規格管理需求",
      "實現高併發場景下的庫存管理與訂單處理，確保數據一致性",
      "打通多渠道數據，構建用戶全生命週期畫像與精準營銷體系",
      "確保系統安全性，防範各類網絡攻擊與數據泄露風險",
    ],
    outcomes: [
      "平台上線後，企業整體銷售額提升45%，客單價增長28%",
      "系統穩定支持日均10萬訂單處理，峰值TPS達到3000+",
      "用戶轉化率提升32%，會員復購率提高40%",
      "運營效率提升60%，數據分析時間從平均3天縮短至實時",
      "系統安全性測試達到行業最高標準，成功防禦多次大規模攻擊",
    ],
    date: "2024 - 2025",
  },
  {
    id: "intelligent-customer-service",
    title: "智能客服與工單管理系統",
    shortDescription: "結合AI智能客服與人工客服的全流程服務平台，實現高效工單處理與客戶問題解決",
    fullDescription:
      "設計並開發了一套完整的智能客服與工單管理系統，整合了AI自動應答與人工客服服務，實現了客戶問題的智能分流與高效處理。系統採用先進的自然語言處理技術，能夠準確理解用戶意圖，自動回答常見問題，並在需要時無縫轉接至人工客服。工單系統支持全生命週期管理，從創建、分配、處理到結案的全流程追蹤，並提供豐富的數據分析功能，幫助企業持續優化客戶服務質量與效率。",
    productPerspective:
      "從產品角度看，該系統解決了企業在客戶服務過程中面臨的效率與質量平衡問題。智能客服模塊能夠24小時不間斷服務，快速響應用戶查詢，大幅減少用戶等待時間。系統採用多級分流機制，簡單問題由AI直接解答，複雜問題則根據專業領域智能分配給合適的人工客服，提高了問題解決的準確性與效率。工單管理模塊提供了直觀的儀表板，展示工單狀態、處理時間、客服績效等關鍵指標，並支持多維度數據分析，幫助管理層識別服務瓶頸與改進機會。此外，系統還整合了知識庫管理功能，支持內容的持續更新與優化，實現了服務質量的不斷提升。",
    technicalPerspective:
      "從技術角度看，系統採用了前後端分離的微服務架構。前端基於React與TypeScript開發，結合Ant Design構建專業的客服工作台與管理界面。後端採用Spring Boot微服務架構，使用WebSocket實現實時通訊，通過RabbitMQ處理消息隊列。系統的核心是基於NLP的智能匹配引擎，它結合了多種文本相似度算法提升匹配精度：1. 基於Ansj中文分詞提升匹配效果，使用ToAnalysis進行中文斷詞（可處理中英文混合），分詞結果進行快取（segmentationCache）避免重複運算提升效能；2. 結合了四種文字相似度演算法，各自有權重：關鍵字匹配（直接比對，權重0.4）、餘弦相似度（基於詞頻向量，權重0.3）、Levenshtein距離（編輯距離，權重0.15）、Jaro-Winkler相似度（適合短文本，權重0.15）；3. 使用Embedding + Faiss向量檢索提升語義理解能力，能夠捕捉詞義相近但表達不同的查詢。系統還實現了會話狀態管理、上下文理解、多輪對話等高級功能，大幅提升了智能客服的體驗與效果。",
    technologies: [
      "React",
      "TypeScript",
      "Ant Design",
      "Spring Boot",
      "WebSocket",
      "RabbitMQ",
      "Ansj分詞",
      "Faiss向量檢索",
      "Elasticsearch",
      "MySQL",
      "Redis",
      "Docker",
      "Kubernetes",
    ],
    challenges: [
      "提高中文自然語言理解的準確性，處理多樣化的表達方式與方言差異",
      "設計高效的工單分配算法，平衡客服專業度與工作負載",
      "實現複雜場景下的多輪對話與上下文理解",
      "構建可擴展的知識庫架構，支持內容的快速檢索與更新",
      "確保系統在高併發場景下的穩定性與響應速度",
    ],
    outcomes: [
      "系統上線後，智能客服解決率達到85%，減少40%的人工客服工作量",
      "平均問題解決時間從30分鐘縮短至8分鐘，客戶滿意度提升35%",
      "工單處理效率提高60%，異常工單識別準確率達到95%",
      "系統穩定支持日均10萬次用戶查詢，峰值並發達到3000+",
      "通過持續學習機制，智能匹配準確率從初期的75%提升至現在的92%",
    ],
    date: "2023-2024",
    imageUrl: "/intelligent-customer-service.png",
  },
]
